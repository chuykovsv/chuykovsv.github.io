{
    "name": "texturedShaderAnim",
    "vs": "precision highp float; uniform mat4 PM; uniform mat4 WM; uniform mat4 OM; uniform sampler2D bones; uniform vec3 key; attribute vec4 position; attribute vec3 normal; attribute vec2 uv; varying vec3 vNor; varying float vDepth; varying vec2 vUv; vec3 vt(vec3 p, vec4 q, vec3 o) { vec3 ret; vec4 t; t.w = -q.x*p.x - q.y*p.y - q.z*p.z; t.x = q.w*p.x + q.y*p.z - q.z*p.y; t.y = q.w*p.y - q.x*p.z + q.z*p.x; t.z = q.w*p.z + q.x*p.y - q.y*p.x; ret.x = -t.w*q.x + t.x*q.w - t.y*q.z + t.z*q.y + o.x; ret.y = -t.w*q.y + t.x*q.z + t.y*q.w - t.z*q.x + o.y; ret.z = -t.w*q.z - t.x*q.y + t.y*q.x + t.z*q.w + o.z; return ret; } void main() { vec2 p = vec2(key.y / 512.0, (key.x + position.w) / 1024.0); vec3 bpos1 = texture2D(bones, p).xyz; p.x += 2.0 / 1024.0; vec3 bpos2 = texture2D(bones, p).xyz; vec3 bpos = mix(bpos1, bpos2, key.z); p.x -= 1.0 / 1024.0; vec4 bq1 = texture2D(bones, p); p.x += 2.0 / 1024.0; vec4 bq2 = texture2D(bones, p); vec4 bq = mix(bq1, bq2, key.z); vUv = uv; vNor = normalize(mat3(OM) * normal); vec4 pos = WM * OM * vec4(vt(position.xyz, bq, bpos), 1.0); vDepth = pos.z; gl_Position = PM * pos; }",
    "fs": "precision highp float; uniform sampler2D tex; varying vec3 vNor; varying vec2 vUv; varying float vDepth; void main() { vec3 light = normalize(vec3(-1, 1, -1)); vec3 color = texture2D(tex, vUv).rgb; vec3 fragColor = mix(color * max(0.2, dot(vNor, light)), vec3(0.7, 0.65, 0.6), min(1.0, vDepth * 0.001)); gl_FragColor = vec4(fragColor, 1.0); }"
}